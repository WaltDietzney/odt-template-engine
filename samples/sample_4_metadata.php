<?php

/**
 * Sample 4 - Setting Metadata, Reloading, and Rendering as Paragraph with Custom Style
 *
 * This sample demonstrates:
 * 1. How to set and save document metadata
 * 2. How to reload the document and display metadata as styled Paragraph content
 */

use OdtTemplateEngine\OdtTemplate;
use OdtTemplateEngine\Elements\Paragraph;

// [1] Initialize a new template instance
$template = new OdtTemplate('samples/templates/template_4_metadata.odt');

// [2] Load the template file
$template->load();

// [3] Set document metadata
$template->setMeta([
    'title' => 'Q2 Financial Report',
    'author' => 'Anna Example',
    'subject' => 'Quarterly Financial Analysis',
    'keywords' => 'finance,report,2025',
    'language' => 'en',
    'generator' => 'OdtTemplateEngine v1.0',
    'editing_cycles' => 4,
    'editing_duration' => 'PT20M',
    'description' => 'Generated automatically with OdtTemplateEngine.',
    'date' => date('c'), // current date in ISO 8601 format
]);

// [4] Save the file once to ensure metadata is written into the document
$outputPath = 'samples/output/output_4_metadata.odt';
$template->save($outputPath);

// === Phase 2: Reload and Process Metadata ===

// [5] Re-open the saved document with a fresh template instance
$template = new OdtTemplate($outputPath);
$template->load();

// [6] Ensure that custom paragraph styles exist
$template->ensureParagraphStylesExist([
    'customParagraph' => [
        'margin-top'       => '0.3cm',
        'margin-bottom'    => '0.3cm',
        'margin-right'     => '8cm',
        'background-color' => '#D3D3D3', // light gray background
        'padding'          => '0.3cm',
        'border'           => '1px solid #000000'
    ],
    // Additional named styles could be registered here
]);

// [7] Read freshly saved metadata from the document
$metadata = $template->getMeta();

// [8] Define a friendly label mapping and desired display order
$metadataOrder = [
    'title'            => 'Title',
    'author'           => 'Author',
    'subject'          => 'Subject',
    'description'      => 'Description',
    'keywords'         => 'Keywords',
    'language'         => 'Language',
    'generator'        => 'Generated by',
    'editing_cycles'   => 'Editing Cycles',
    'editing_duration' => 'Editing Duration',
    'date'             => 'Creation Date',
];

// [9] Create a new Paragraph element with the custom style
$metaPar = new Paragraph();
$metaPar->setParagraphStyle('customParagraph');

// [10] Build the Paragraph content from metadata
foreach ($metadataOrder as $key => $label) {
    if (isset($metadata[$key])) {
        $metaPar
            ->addText($label . ': ', [
                'bold'      => true,
                'font-size' => '10pt',
                'color'     => '#1E90FF' // blue for labels
            ])
            ->addText($metadata[$key], [
                'font-size' => '8pt',
                'color'     => '#000000' // black for values
            ])
            ->addLineBreak();
    }
}

// [11] Insert the completed Paragraph into the template at the placeholder {{metadata}}
$template->setElement('metadata', $metaPar);

// [12] Render the template with all assigned values
$template->render();

// [13] Save the final document
$template->save($outputPath);

// [14] (Optional) Output metadata for debugging
// print_r($metadata);

