<?php
require '../vendor/autoload.php';

use OdtTemplateEngine\OdtTemplate;
use OdtTemplateEngine\Elements\ImageElement;
use OdtTemplateEngine\Elements\Paragraph;
use OdtTemplateEngine\Elements\RichText;

// 1️⃣ Load the ODT template
$template = new OdtTemplate('templates/template_with_tabstops.odt');
$template->load();
$template->setValues(['title' => 'WaltDietzney\'s ODT Template Engine — Enjoy!']);

// 9️⃣ Set document metadata (project-related and descriptive)
$template->setMeta([
    'title' => 'ODT Template Engine Demo Document',
    'subject' => 'Demonstration of paragraph tab stops, tabular blocks and key-value rendering',
    'description' => 'This document was auto-generated using the WaltDietzney ODT Template Engine for PHP.',
    'keywords' => 'ODT, template, PHP, tab stops, document automation',
    'initial_author' => 'Template Engine Example Script',
    'author' => 'WaltDietzney',
    'language' => 'en-US',
    'creation_date' => date(DATE_W3C),
    'date' => date(DATE_W3C),
    'editing_cycles' => '1',
    'editing_duration' => 'PT5M', // ISO 8601 duration format: e.g., PT5M = 5 minutes
    'generator' => 'ODT Template Engine (PHP) - v1.0',

    // 🧩 Custom project metadata
    'project_name' => 'Invoice Generation Demo',
    'project_version' => 'v1.2.0',
    'client' => 'Acme Corp.',
]);

$projectMeta = new Paragraph( 'Heading 2');
$projectMeta->addText('Project Metadata', ['color' => '#333', 'underline' => 'single']);
$metaInfo = new Paragraph();
$metaInfo->addText("Generated for: ", ['bold' => true])->addText("Acme Corp.")->addLineBreak();
$metaInfo->addText("Project: ", ['bold' => true])->addText("Invoice Generation Demo")->addLineBreak();
$metaInfo->addText("Version: ", ['bold' => true])->addText("v1.2.0")->addLineBreak();
$metaInfo->addText("Author: ", ['bold' => true])->addText("WaltDietzney")->addLineBreak();
$metaInfo->addText("Generated by: ", ['bold' => true])->addText("ODT Template Engine (PHP)")->addLineBreak();
$metaInfo->addText("Created: ", ['bold' => true])->addText(date("Y-m-d H:i"));


// 2️⃣ Create a title paragraph
$title = new Paragraph('Title');
$title->addText('Different Ways to Set Tabs');

// 3️⃣ Define tab stops for a line with inline tabs
$tabStops = [
    ['position' => 5.0, 'alignment' => 'left', 'text' => 'Item A', 'style' => ['bold' => true]],
    ['position' => 11.0, 'alignment' => 'right', 'text' => '€12.50', 'style' => ['color' => '#cfcfcf'], 'italic' => true],
];

$par1 = new Paragraph();
$par1->addTabsWithTexts($tabStops); // 🔹 Method: addTabsWithTexts()

// Optional: Add an image that illustrates the function
$img1 = new ImageElement('../assets/addsTabsWithTexts.png', [
    'width' => '7cm',
    'align' => 'center',
    'wrap' => 'none',
]);

// 4️⃣ Create tabular data (with a header and multiple rows)
$rows = [
    ['Product', 'Price'],
    ['Widget', '€9.99'],
    ['Gadget', '€14.20'],
];

$par2 = new Paragraph();
$par2->addTabularLines($rows, $tabStops, [
    'color' => '#0066cc', // blue header text
    'InvoiceTable'
]);

// 5️⃣ Create a summary line using a tab layout (key-value)
$par3 = new Paragraph();
$par3->addKeyValueLine('Subtotal', '€24.19', 11.0, [
    'italic' => true,
    'bold' => true,
]);

// 6️⃣ Combine everything into a RichText block for template insertion
$rich = new RichText();

$rich->addParagraph($title)
    ->addParagraphBreak(2)
    ->addText('The following examples demonstrate how to use our tab-handling features to generate rich, structured layouts with just a single template variable.')
    ->addParagraphBreak(2)

    // 🧩 addTabsWithTexts
    ->addParagraph('addTabsWithTexts()', 'Heading 1', ['underline' => 'single'])
    ->addParagraphBreak(1)
    ->addText('Use ')
    ->addText('addTabsWithTexts()', ['italic' => true, 'color' => '#349beb'])
    ->addText(' to insert multiple text blocks along a single line with defined tab stops. ')
    ->addText('Item A', ['bold' => true])
    ->addText(' is placed at ')
    ->addText('5.0 cm (left-aligned)', ['italic' => true])
    ->addText(', and the price ')
    ->addText('€12.50', ['bold' => true])
    ->addText(' appears at 11.0 cm (right-aligned, light gray).')
    ->addParagraphBreak(1)
    ->addText('Here’s the basic structure:')
    ->addParagraphBreak(1)

    // 📄 Code block: creating the paragraph
    ->addParagraph('$par1 = new Paragraph();', 'Quotations', ['font-size' => '10pt', 'color' => '#349beb', 'italic' => true])
    ->addParagraphBreak(1)

    // 📄 Code block: defining tab stops
    ->addParagraph(
        '$tabStops = [
    [\'position\' => 5.0, \'alignment\' => \'left\',  \'text\' => \'Item A\',   \'style\' => [\'bold\' => true]],
    [\'position\' => 11.0, \'alignment\' => \'right\', \'text\' => \'€12.50\', \'style\' => [\'color\' => \'#cfcfcf\'], \'italic\' => true],
];',
        'Quotations',
        ['font-size' => '10pt', 'color' => '#349beb', 'italic' => true]
    )
    ->addParagraphBreak(1)

    // 📄 Code block: adding tabs to the paragraph
    ->addParagraph('$par1->addTabsWithTexts($tabStops);', 'Quotations', ['font-size' => '10pt', 'color' => '#349beb', 'italic' => true])
    ->addParagraphBreak(2)
    ->addParagraph($par1)
    ->addParagraphBreak(2)

    // 🧩 addTabularLines
    ->addParagraph('addTabularLines()', 'Heading 1', ['underline' => 'single'])
    ->addParagraphBreak(1)
    ->addText('The method ')
    ->addText('addTabularLines()', ['italic' => true, 'color' => '#349beb'])
    ->addText(' helps you render a structured table layout using tab stops. The first row typically serves as a styled header.')
    ->addParagraphBreak(1)
    ->addParagraph($par2)
    ->addParagraphBreak(2)

    // 🧩 addKeyValueLine
    ->addParagraph('addKeyValueLine()', 'Heading 1', ['underline' => 'single'])
    ->addParagraphBreak(1)
    ->addText('Use ')
    ->addText('addKeyValueLine()', ['italic' => true, 'color' => '#349beb'])
    ->addText(' to insert a single line containing a key-value pair with optional formatting.')
    ->addParagraphBreak(1)
    ->addParagraph($par3)
    ->addParagraphBreak(2)

    // 📦 Summary
    ->addParagraph('In the end, we only used three template variables to generate this document:')
    ->addBulletList([
        '{{logo}} for the logo image',
        '{{title}} for the title paragraph',
        '{{tabular_block}} for all generated tabbed content',
    ])
    ->addParagraphBreak(3)
    ->addText('We hope this gave you a great idea of how to use our ODT Template Engine!', ['bold' => true, 'font-size' => '24pt'])
    // Adds Meta Data
    ->addParagraphBreak(3)
    ->addParagraph($projectMeta)
    ->addParagraphBreak(1)
    ->addParagraph($metaInfo);

// 7️⃣ Inject rich content and logo into the template
$template->setElement('tabular_block', $rich);
$template->setImage('logo', '../assets/Logo-2.png', [
    'width' => '2cm',
    'anchor' => 'as-char',
    'wrap' => 'none',
]);

// 8️⃣ Save the result
$template->save('output/output_advanced_tabs.odt');